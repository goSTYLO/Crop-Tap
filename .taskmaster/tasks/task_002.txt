# Task ID: 2
# Title: Configure Sequelize ORM and Define User Model
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Establish the database connection using Sequelize and the MySQL2 driver. Define the `User` model including fields for `username`, `email`, `password` (hashed), and `role` (ENUM: 'buyer', 'farmer', 'admin').
# Details:
Create a `config/database.js` file to initialize the Sequelize instance using credentials from `.env`. In a `models/user.js` file, define the `User` model with `Sequelize.STRING` for username/email, and `Sequelize.ENUM` for the role. Add a `beforeCreate` hook to the User model to automatically hash the password using `bcrypt.hash()` before saving it to the database. Sync the model with the database using `sequelize.sync()` to create the `users` table.

# Test Strategy:
After starting the application, connect to the MySQL database using a GUI client (like MySQL Workbench) or the command line. Verify that the `users` table has been created with the correct columns and data types.

# Subtasks:
## 1. Install Sequelize and Related Dependencies [pending]
### Dependencies: None
### Description: Install the necessary npm packages for database interaction: Sequelize ORM, MySQL2 driver, bcrypt for hashing, and dotenv for environment variables.
### Details:
Execute 'npm install sequelize mysql2 bcrypt dotenv' in the project's root directory. This will add the packages to the `dependencies` section of the `package.json` file.

## 2. Create Sequelize Database Configuration File [pending]
### Dependencies: 2.1
### Description: Create a new file to house the Sequelize instance and configure it to connect to the MySQL database using credentials from environment variables.
### Details:
Create a file at `config/database.js`. Import `Sequelize` and `dotenv`. Use `dotenv.config()` to load `.env` variables. Initialize a new Sequelize instance with `DB_NAME`, `DB_USER`, `DB_PASSWORD`, and `DB_HOST` from `process.env`. Export the instance.

## 3. Define the User Model Schema [pending]
### Dependencies: 2.2
### Description: Create the User model file and define its schema, including fields for username, email, password, and role, according to the task requirements.
### Details:
Create `models/user.js`. Import `DataTypes` from `sequelize` and the configured sequelize instance from `config/database.js`. Define the `User` model with `username` (STRING), `email` (STRING, unique), `password` (STRING), and `role` (ENUM('buyer', 'farmer', 'admin')).

## 4. Implement `beforeCreate` Hook for Password Hashing [pending]
### Dependencies: 2.3
### Description: Add a `beforeCreate` hook to the User model to automatically and securely hash user passwords before they are stored in the database.
### Details:
In `models/user.js`, within the User model definition options, add a `hooks` object. Define a `beforeCreate` async function that takes the user instance as an argument. Inside the hook, generate a salt and hash the `user.password` using `bcrypt.hash()`. Assign the resulting hash back to `user.password`.

## 5. Sync Sequelize Models with the Database [pending]
### Dependencies: 2.4
### Description: Integrate the database connection into the main application and use Sequelize's sync method to automatically create the 'users' table based on the defined model.
### Details:
In the main application entry point (e.g., `server.js` or `app.js`), import the sequelize instance from `config/database.js`. After setting up the server to listen, call `sequelize.sync()`. Using `{ force: true }` during development can be helpful to drop and recreate tables on every restart. Start the application.

