# Task ID: 6
# Title: Define Product Model and Implement CRUD API
# Status: pending
# Dependencies: 5
# Priority: high
# Description: Define the `Product` model and its association with the `User` model (a product belongs to a farmer). Implement the full set of RESTful CRUD endpoints at `/api/products`.
# Details:
In `models/product.js`, define the Product model with fields like `name`, `description`, `price`, `quantity`, and `imageUrl`. In your main models file (`models/index.js`), define the association: `User.hasMany(Product)` and `Product.belongsTo(User, { foreignKey: 'farmerId' })`. Create `product.controller.js` and `product.routes.js`. Implement `createProduct`, `getAllProducts`, `getProductById`, `updateProduct`, and `deleteProduct`. Protect C/U/D routes with `authorize(['farmer', 'admin'])` middleware.

# Test Strategy:
Use Postman with a valid 'farmer' JWT. Test POST to `/api/products` to create a product. Test GET to view all and a single product. Test PUT/PATCH to update the product. Test DELETE to remove it. Attempt C/U/D operations with a 'buyer' token to ensure 403 Forbidden errors are returned.

# Subtasks:
## 1. Define the Sequelize Product Model [pending]
### Dependencies: None
### Description: Create a new file for the Product model and define its schema using Sequelize, including all necessary fields for product information.
### Details:
Create the file `models/product.js`. Inside this file, define a Sequelize model named 'Product' with the following attributes: `name` (STRING), `description` (TEXT), `price` (DECIMAL(10, 2)), `quantity` (INTEGER), and `imageUrl` (STRING).

## 2. Establish User-Product Model Association [pending]
### Dependencies: 6.1
### Description: Update the main models index file to define the relationship between the User and Product models, specifying that a Product belongs to a User (farmer).
### Details:
In `models/index.js`, import the new Product model. Then, establish the one-to-many relationship: `db.User.hasMany(db.Product, { foreignKey: 'farmerId' });` and `db.Product.belongsTo(db.User, { as: 'farmer', foreignKey: 'farmerId' });`. This will add the `farmerId` foreign key to the products table.

## 3. Create Product API Routes and Controller Scaffolding [pending]
### Dependencies: 6.2
### Description: Set up the necessary routing and controller files for the product API. This involves creating the files and wiring them into the main application.
### Details:
Create `routes/product.routes.js` and `controllers/product.controller.js`. In `app.js`, register the new routes with `app.use('/api/products', productRoutes);`. In `product.routes.js`, define router entries for `GET /`, `GET /:id`, `POST /`, `PUT /:id`, and `DELETE /:id`, linking them to empty placeholder functions in `product.controller.js`.

## 4. Implement Public Read Endpoints for Products [pending]
### Dependencies: 6.3
### Description: Implement the logic for the public-facing GET endpoints to fetch all products and a single product by its ID.
### Details:
In `product.controller.js`, implement the `getAllProducts` function using `Product.findAll({ include: 'farmer' })` to retrieve all products and their associated farmer. Implement `getProductById` using `Product.findByPk(req.params.id, { include: 'farmer' })` to retrieve a single product.

## 5. Implement and Secure C/U/D Product Endpoints [pending]
### Dependencies: 6.4
### Description: Implement the create, update, and delete logic in the product controller and secure these routes to ensure only authorized users can perform these actions.
### Details:
In `product.routes.js`, apply the `authorize(['farmer', 'admin'])` middleware to the POST, PUT, and DELETE routes. In `product.controller.js`, implement `createProduct`, setting `farmerId` from `req.user.id`. For `updateProduct` and `deleteProduct`, first find the product, then verify that `product.farmerId` matches `req.user.id` before proceeding with the operation.

