# Task ID: 12
# Title: Define Payment Model and Implement Payment Confirmation
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Create a `Payment` model and an endpoint to handle post-payment confirmation. This will update the order status and record the payment details.
# Details:
Define a `Payment` model with fields like `orderId`, `stripePaymentId`, `amount`, and `status`. Create a webhook endpoint `POST /api/payments/webhook` to listen for Stripe events (e.g., `payment_intent.succeeded`). In the webhook handler, verify the event signature, extract the payment intent ID, find the corresponding order in your DB, create a record in your `payments` table, and update the order's status to 'paid' or 'processing'.

# Test Strategy:
Use the Stripe CLI to trigger a `payment_intent.succeeded` event pointed at your local webhook endpoint. Verify that the webhook receives the event, creates a new record in the `payments` table, and correctly updates the `status` of the associated order in the `orders` table.

# Subtasks:
## 1. Define Payment Sequelize Model [pending]
### Dependencies: None
### Description: Create the Sequelize model for payments, including its attributes and associations with the Order model. This will establish the database table structure for storing payment records.
### Details:
Create a new file `models/payment.js`. Define a 'Payment' model with fields: `orderId` (INTEGER, foreign key), `stripePaymentId` (STRING), `amount` (DECIMAL), `currency` (STRING), and `status` (STRING, e.g., 'succeeded', 'failed'). In `models/index.js`, establish the relationship: `Order.hasOne(db.Payment)` and `db.Payment.belongsTo(db.Order)`. Sync the model to create the table.

## 2. Create Payment Routes and Controller Files [pending]
### Dependencies: None
### Description: Set up the necessary routing and controller files to handle payment-related API endpoints. This includes creating the initial webhook endpoint structure.
### Details:
Create `controllers/payment.controller.js` and `routes/payment.routes.js`. In `payment.routes.js`, define a router and a `POST /webhook` route. In `app.js`, register the payment router under the `/api/payments` path. The controller function should initially just log the request and send a 200 OK response.

## 3. Implement Stripe Webhook Signature Verification [pending]
### Dependencies: 12.2
### Description: Secure the webhook endpoint by implementing Stripe's signature verification logic. This ensures that incoming requests originate from Stripe and have not been tampered with.
### Details:
Install the Stripe Node.js library (`npm install stripe`). In `app.js`, configure a special `express.raw({type: 'application/json'})` middleware specifically for the `/api/payments/webhook` route. In `payment.controller.js`, use `stripe.webhooks.constructEvent` to validate the request body against the `stripe-signature` header and a new `STRIPE_WEBHOOK_SECRET` environment variable. Handle verification errors by returning a 400 status.

## 4. Implement Business Logic for 'payment_intent.succeeded' Event [pending]
### Dependencies: 12.1, 12.3
### Description: Write the core logic inside the webhook handler to process successful payments. This involves creating a payment record and updating the corresponding order status.
### Details:
Inside the verified webhook handler in `payment.controller.js`, add a switch statement for `event.type`. For `payment_intent.succeeded`, extract the `paymentIntent` object. Use the `orderId` from the payment intent's metadata to find the corresponding `Order` in the database. Use a Sequelize transaction to: 1. Create a new record in the `payments` table with details from the `paymentIntent`. 2. Update the `status` of the `Order` record to 'paid'.

## 5. Add Environment Variables and Update Documentation [pending]
### Dependencies: 12.3
### Description: Add the new required environment variable for the Stripe webhook secret to the example configuration and document the setup process for other developers.
### Details:
Add `STRIPE_WEBHOOK_SECRET` to the `.env.example` file with a placeholder value. Update the project's README.md with instructions on how to obtain a webhook signing secret from the Stripe Dashboard and set it up locally. Include a command for using the Stripe CLI to test the webhook.

