# Task ID: 9
# Title: Define Order and OrderItem Models and Create Order Logic
# Status: pending
# Dependencies: 8
# Priority: high
# Description: Create the `orders` and `order_items` models. Implement the logic to convert a user's cart into a formal order record in the database.
# Details:
Define `Order` and `OrderItem` models. An `Order` belongs to a `User`. An `Order` has many `OrderItems`. An `OrderItem` belongs to an `Order` and a `Product`. Create an endpoint `POST /api/orders`. This controller function should: 1. Find the user's cart. 2. Create a new `Order` record with a `totalAmount` and `status` ('pending'). 3. Move all `CartItem` records to new `OrderItem` records associated with the new order. 4. Clear the user's cart. Wrap this logic in a Sequelize transaction to ensure atomicity.

# Test Strategy:
Add items to a buyer's cart. Call `POST /api/orders`. Verify that a new record is created in the `orders` table and that corresponding records are created in `order_items`. Check that the `cart_items` and `carts` tables are now empty for that user. Ensure the product's available quantity is decremented.

# Subtasks:
## 1. Define the Order Model and its Association with User [pending]
### Dependencies: None
### Description: Create the Sequelize model for `Order` in a new file `models/order.js`. An order must belong to a user.
### Details:
Create a new file at `models/order.js`. Define the `Order` model with fields: `userId` (ForeignKey to User), `totalAmount` (DECIMAL), and `status` (ENUM['pending', 'paid', 'shipped', 'delivered', 'cancelled']). In `models/index.js`, import the new model and establish the `Order.belongsTo(User)` and `User.hasMany(Order)` associations.

## 2. Define the OrderItem Model and its Associations [pending]
### Dependencies: 9.1
### Description: Create the Sequelize model for `OrderItem` in a new file `models/orderItem.js`. An OrderItem links an Order to a Product.
### Details:
Create a new file at `models/orderItem.js`. Define the `OrderItem` model with fields: `orderId` (ForeignKey to Order), `productId` (ForeignKey to Product), `quantity` (INTEGER), and `price` (DECIMAL, to store the price at time of purchase). In `models/index.js`, import the model and establish the `OrderItem.belongsTo(Order)`, `Order.hasMany(OrderItem)`, and `OrderItem.belongsTo(Product)` associations.

## 3. Implement the Order Creation Controller Logic [pending]
### Dependencies: 9.2
### Description: In a new file `controllers/order.controller.js`, create the `createOrder` function that converts a user's cart into a new order, wrapped in a Sequelize transaction.
### Details:
The `createOrder` function will accept `req` and `res`. It will use `sequelize.transaction(async (t) => { ... })`. Inside the transaction: 1. Find the user's cart and cart items using `req.user.id`. 2. Calculate the total price from the cart items. 3. Create a new `Order` record. 4. Use `OrderItem.bulkCreate` to create new `OrderItem` records from the `CartItem` data. 5. Delete all `CartItem` records for that user's cart.

## 4. Decrement Product Quantity on Order Creation [pending]
### Dependencies: 9.3
### Description: Update the order creation logic to decrement the `availableQuantity` of each product when an order is successfully placed.
### Details:
Within the Sequelize transaction in `order.controller.js`, after retrieving the cart items, iterate through them. For each item, find the corresponding `Product` and decrement its `availableQuantity` by the `quantity` in the cart item. Ensure there is sufficient quantity available before proceeding with the order. If any product is out of stock, the transaction should be rolled back.

## 5. Create and Secure the Order Creation API Endpoint [pending]
### Dependencies: 9.4
### Description: Create `routes/order.routes.js` to define the `POST /api/orders` endpoint and protect it with authentication middleware.
### Details:
Create the new route file. Import the Express router and the `createOrder` function from `order.controller.js`. Import the `authenticate` and `authorize` middleware from `middleware/auth.js`. Define the route: `router.post('/', [authenticate, authorize(['buyer'])], createOrder)`. Finally, mount this router in `app.js` under the `/api/orders` path.

