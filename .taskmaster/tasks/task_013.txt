# Task ID: 13
# Title: Implement Admin User Management API Endpoints
# Status: pending
# Dependencies: 5
# Priority: medium
# Description: Create a full set of CRUD API endpoints at `/api/users` for administrators to manage all users on the platform.
# Details:
Create `user.controller.js` and `user.routes.js`. Implement `getAllUsers`, `getUserById`, `updateUser`, and `deleteUser` functions. Secure all these routes using the `authorize(['admin'])` middleware to ensure only administrators can perform these actions. The `updateUser` endpoint can be used to change user roles or other details.

# Test Strategy:
Using an admin JWT, test all CRUD operations on the `/api/users` endpoints. Verify you can get a list of users, update a user's role, and delete a user. Attempt to access these endpoints with a buyer or farmer JWT and verify a 403 Forbidden error is returned.

# Subtasks:
## 1. Create User Management Controller and Route Files [pending]
### Dependencies: None
### Description: Set up the necessary files for user management API endpoints. This includes creating a new controller file for the logic and a new routes file for defining the endpoint paths, and integrating them into the main application.
### Details:
Create `src/controllers/user.controller.js` and `src/routes/user.routes.js`. In `user.routes.js`, initialize an Express router. In `server.js`, require the new user routes file and mount it on the `/api/users` path using `app.use('/api/users', userRoutes);`.

## 2. Implement GET /api/users Endpoint to List All Users [pending]
### Dependencies: 13.1
### Description: Create the controller function and route for administrators to retrieve a complete list of all users in the system. The returned data should not include sensitive information like passwords.
### Details:
In `user.controller.js`, create an `async` function `getAllUsers`. Use the `User.findAll()` Sequelize method with the `attributes: { exclude: ['password'] }` option. In `user.routes.js`, define the `GET /` route, linking it to the `getAllUsers` controller. Secure this route using the `authenticate` and `authorize(['admin'])` middleware.

## 3. Implement GET /api/users/:id Endpoint to Fetch a Single User [pending]
### Dependencies: 13.1
### Description: Create the controller function and route for an administrator to fetch a single user's details by their ID. This endpoint should handle cases where the user is not found.
### Details:
In `user.controller.js`, create an `async` function `getUserById`. Use `User.findByPk(req.params.id, { attributes: { exclude: ['password'] } })`. If the user is not found, return a 404 error. In `user.routes.js`, define the `GET /:id` route and secure it with `authenticate` and `authorize(['admin'])` middleware.

## 4. Implement PUT /api/users/:id Endpoint to Update User Details [pending]
### Dependencies: 13.1
### Description: Create the controller function and route for an administrator to update a user's information, such as their role or username. The endpoint should find the user, apply the updates, and save the changes.
### Details:
In `user.controller.js`, create `updateUser`. Find the user using `User.findByPk(req.params.id)`. If found, update the user object with fields from `req.body` (e.g., `username`, `email`, `role`). Call `user.save()` and return the updated user object (excluding password). In `user.routes.js`, create the `PUT /:id` route and secure it with `authenticate` and `authorize(['admin'])` middleware.

## 5. Implement DELETE /api/users/:id Endpoint to Remove a User [pending]
### Dependencies: 13.1
### Description: Create the controller function and route for an administrator to permanently delete a user from the database. This is the final piece of the CRUD functionality.
### Details:
In `user.controller.js`, create `deleteUser`. Find the user by `req.params.id`. If the user exists, call the `user.destroy()` method. Respond with a 204 No Content or a success message. Handle cases where the user is not found. In `user.routes.js`, create the `DELETE /:id` route and secure it with `authenticate` and `authorize(['admin'])` middleware.

