# Task ID: 8
# Title: Define Cart and CartItem Models and API
# Status: pending
# Dependencies: 6
# Priority: medium
# Description: Create the database models for `carts` and `cart_items` and implement API endpoints for buyers to manage their shopping cart.
# Details:
Define `Cart` and `CartItem` models. A `Cart` belongs to a `User`. A `Cart` has many `CartItems`. A `CartItem` belongs to a `Cart` and a `Product`. Create `cart.controller.js` and `cart.routes.js` under `/api/cart`. Implement endpoints for: `GET /` (get user's cart), `POST /` (add item to cart, with `productId` and `quantity`), `PUT /:itemId` (update quantity), and `DELETE /:itemId` (remove item). All routes must be protected and operate on the authenticated user's cart.

# Test Strategy:
Log in as a 'buyer'. Use Postman to POST a `productId` to `/api/cart` and verify the item is added. GET `/api/cart` to see the contents. PUT to change a quantity and DELETE to remove an item. Verify all database changes are correct. Attempt to access another user's cart to ensure it's not possible.

# Subtasks:
## 1. Define Cart Model and User Association [pending]
### Dependencies: None
### Description: Create the Sequelize model for `Cart`. A user should have one cart. This model will serve as the container for items a user wants to purchase.
### Details:
Create a new file `models/cart.js`. Define a Sequelize model named `Cart` with a `userId` foreign key. In `models/index.js`, establish a one-to-one relationship: `User.hasOne(Cart)` and `Cart.belongsTo(User)`. Run a sync to create the `carts` table in the database.

## 2. Define CartItem Model and Associations [pending]
### Dependencies: 8.1
### Description: Create the Sequelize model for `CartItem`. This model represents a specific product and its quantity within a user's cart.
### Details:
Create `models/cartItem.js`. Define a model named `CartItem` with `cartId`, `productId`, and `quantity` fields. In `models/index.js`, add the associations: `Cart.hasMany(CartItem)`, `CartItem.belongsTo(Cart)`, and `CartItem.belongsTo(Product)`. This links a cart to its items, and each item to a product.

## 3. Setup Cart API Routes and Controller Shell [pending]
### Dependencies: 8.2
### Description: Create the router and controller files for the cart API. Define the routes and protect them to ensure only authenticated users can access their cart.
### Details:
Create `routes/cart.routes.js` and `controllers/cart.controller.js`. In the routes file, define `GET /`, `POST /`, `PUT /:itemId`, and `DELETE /:itemId`. Apply the `authJwt.verifyToken` middleware to all routes. In `app.js`, register the router with `app.use('/api/cart', cartRoutes)`. The controller file should have exported placeholder functions for each endpoint.

## 4. Implement GET Cart and POST Add Item Logic [pending]
### Dependencies: 8.3
### Description: Implement the controller logic to retrieve the user's current cart and to add a new item to it.
### Details:
In `cart.controller.js`, implement `getCart` and `addItem`. For `getCart`: find the cart for `req.userId`, creating it if it doesn't exist. Eagerly load `CartItems` and their associated `Product` data. For `addItem`: find the user's cart, check if the `productId` from `req.body` is already in the cart. If so, update its quantity. If not, create a new `CartItem` record.

## 5. Implement PUT Update and DELETE Remove Item Logic [pending]
### Dependencies: 8.3
### Description: Implement the controller logic for updating the quantity of an item in the cart and for removing an item completely.
### Details:
In `cart.controller.js`, implement `updateItemQuantity` and `removeItem`. For `updateItemQuantity`: find the `CartItem` by its ID (`req.params.itemId`). Verify it belongs to the authenticated user's cart before updating its `quantity` from `req.body`. For `removeItem`: find the `CartItem` by its ID, verify ownership, and then delete the record.

