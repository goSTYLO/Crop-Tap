# Task ID: 15
# Title: Implement Frontend User Auth and Product Display
# Status: pending
# Dependencies: 4, 6, 14
# Priority: medium
# Description: Write JavaScript to interact with the backend API. Implement the user registration/login flow and fetch and display products on the main page.
# Details:
In `auth.js`, add event listeners to the login and registration forms. On submit, use `fetch()` to call `POST /api/auth/login` or `/register`. On successful login, save the returned JWT to `localStorage`. Create a function to add the `Authorization: Bearer <token>` header to subsequent API requests. In `products.js`, use `fetch()` to call `GET /api/products` on page load, then dynamically generate HTML content (e.g., product cards) and append it to the product listing container on `index.html`.

# Test Strategy:
Open the web application. Register a new user and verify you are redirected or see a success message. Log in with the new user and check `localStorage` in the browser's developer tools to see the JWT. Navigate to the homepage and verify that product cards, fetched from the backend, are displayed on the page.

# Subtasks:
## 1. Implement User Registration Form Handler [pending]
### Dependencies: None
### Description: In `public/js/auth.js`, add an event listener to the registration form. On submit, prevent the default form action, collect user input (username, email, password, role), and send it to the backend.
### Details:
Select the registration form element (e.g., `#register-form`). Use the 'submit' event. Create a payload object from the form's input values. Use `fetch()` to make a `POST` request to `/api/auth/register` with the payload. Handle the response, showing an alert or message to the user on success or failure.

## 2. Implement User Login Form Handler and Store JWT [pending]
### Dependencies: None
### Description: In `public/js/auth.js`, add an event listener to the login form. On submit, send the credentials to the login endpoint and store the returned JSON Web Token in `localStorage` upon success.
### Details:
Select the login form element (e.g., `#login-form`). On 'submit', use `fetch()` to make a `POST` request to `/api/auth/login` with the user's email and password. If the response is successful (e.g., status 200), parse the JSON to get the token and save it to `localStorage.setItem('token', response.token)`. Redirect to the main page or update the UI.

## 3. Create a Utility Function for Authenticated API Requests [pending]
### Dependencies: 15.2
### Description: Create a helper function that retrieves the JWT from `localStorage` and adds the `Authorization: Bearer <token>` header to `fetch` requests. This will be used for all subsequent authenticated API calls.
### Details:
In a shared utility script or within `auth.js`, create a function like `getAuthHeaders()`. This function will read the token from `localStorage.getItem('token')`. If a token exists, it will return a headers object: `{ 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + token }`. If not, it returns a basic header object.

## 4. Fetch Products on Page Load [pending]
### Dependencies: None
### Description: In `public/js/products.js`, create a function that executes when the main page (`index.html`) loads. This function will use `fetch()` to make a `GET` request to the `/api/products` endpoint to retrieve the list of all available products.
### Details:
Use a `DOMContentLoaded` event listener to trigger the fetch call. The request will be a simple `GET` to `/api/products`. The function should handle the response, parse the JSON into an array of product objects, and then pass this array to a rendering function.

## 5. Dynamically Generate and Display Product Cards [pending]
### Dependencies: 15.4
### Description: Create a function that takes an array of product data and dynamically generates HTML content (product cards) for each product, appending them to the main product listing container on the page.
### Details:
In `products.js`, create a function `renderProducts(products)`. This function will iterate over the `products` array. For each product object, it will create HTML string or DOM elements for a 'card' containing the product's name, image, price, and description. Append each new card element to the product container element (e.g., `#product-listing`) in `index.html`.

