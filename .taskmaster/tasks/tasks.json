{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Initial Project Structure and LocalStorage Data Model Setup",
        "description": "Create the basic project folder structure including HTML, CSS, and JavaScript files. Initialize the localStorage with the required data models (users, products, carts, etc.) to ensure the application has a persistent data foundation from the start.",
        "status": "pending",
        "dependencies": [],
        "priority": "high",
        "details": "Create a project folder containing `index.html`, `styles.css`, and `app.js`. In `app.js`, write an initialization function that runs on page load. This function will check for the existence of the following keys in localStorage: 'users', 'products', 'carts', 'cart_items', 'orders', 'order_items', and 'payments'. If a key is not found, it should be created and initialized with an empty array. \n\nPseudo-code:\n```javascript\nconst dataModels = ['users', 'products', 'carts', 'cart_items', 'orders', 'order_items', 'payments'];\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  dataModels.forEach(model => {\n    if (!localStorage.getItem(model)) {\n      localStorage.setItem(model, JSON.stringify([]));\n    }\n  });\n});\n```",
        "testStrategy": "Open the application in a modern web browser. Use the developer tools to inspect the browser's localStorage. Verify that all specified keys ('users', 'products', etc.) have been created and their values are empty arrays ('[]').",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Project Directory and Core Files",
            "description": "Establish the root project folder and create the three essential empty files (`index.html`, `styles.css`, `app.js`) that will form the basis of the application.",
            "dependencies": [],
            "details": "Create a new directory for the project. Inside this directory, create three empty files: `index.html`, `styles.css`, and `app.js`. This sets up the fundamental file structure.",
            "status": "pending",
            "testStrategy": "Verify that the project folder and the three specified files exist in the file system using a file explorer or command line."
          },
          {
            "id": 2,
            "title": "Set Up `index.html` Boilerplate and Link Assets",
            "description": "Populate the `index.html` file with the standard HTML5 document structure, including linking the CSS and JavaScript files to ensure they are loaded by the browser.",
            "dependencies": [
              1
            ],
            "details": "Edit `index.html` to add the `<!DOCTYPE html>`, `<html>`, `<head>`, and `<body>` tags. In the `<head>`, include a `<title>`, a `<link rel=\"stylesheet\" href=\"styles.css\">`. At the end of the `<body>`, add `<script defer src=\"app.js\"></script>`.",
            "status": "pending",
            "testStrategy": "Open `index.html` in a browser. Use the developer tools' 'View Page Source' and 'Network' tab to confirm that the HTML structure is correct and that both `styles.css` and `app.js` are being requested and loaded."
          },
          {
            "id": 3,
            "title": "Define Data Models and Initialization Function in `app.js`",
            "description": "In `app.js`, create the array of data model keys and write the core function responsible for checking and initializing these keys in localStorage if they do not already exist.",
            "dependencies": [
              1
            ],
            "details": "In `app.js`, define a constant array `const dataModels = ['users', 'products', 'carts', 'cart_items', 'orders', 'order_items', 'payments'];`. Then, create a function `function initializeLocalStorage() { dataModels.forEach(model => { if (!localStorage.getItem(model)) { localStorage.setItem(model, JSON.stringify([])); } }); }`.",
            "status": "pending",
            "testStrategy": "After creating the function, manually paste and run `initializeLocalStorage()` in the browser console. Then, inspect the 'Application' > 'LocalStorage' tab in the developer tools to confirm the keys were created with `[]` as their value."
          },
          {
            "id": 4,
            "title": "Attach Initialization Function to DOMContentLoaded Event",
            "description": "Ensure the data model initialization logic runs automatically as soon as the HTML document is fully loaded and parsed by using the appropriate event listener.",
            "dependencies": [
              2,
              3
            ],
            "details": "In `app.js`, add an event listener at the top level of the script: `document.addEventListener('DOMContentLoaded', initializeLocalStorage);`. This will execute the previously created function upon page load.",
            "status": "pending",
            "testStrategy": "In the browser developer tools, clear all data from localStorage. Refresh the `index.html` page. Inspect the 'Application' > 'LocalStorage' tab again to verify that all specified keys have been automatically recreated."
          },
          {
            "id": 5,
            "title": "Add Basic CSS and HTML Placeholders for Verification",
            "description": "Add minimal content to the HTML and CSS files to provide visual confirmation that the project structure is correctly linked and functional.",
            "dependencies": [
              2
            ],
            "details": "In `styles.css`, add a simple rule like `body { background-color: #f4f4f4; font-family: sans-serif; }`. In `index.html`'s body, add an `<h1>Welcome to Crop-Tap</h1>` to have visible content on the page.",
            "status": "pending",
            "testStrategy": "Load `index.html` in the browser. Verify that the 'Welcome to Crop-Tap' heading is visible and that the background color and font specified in the CSS have been applied to the page."
          }
        ]
      },
      {
        "id": 2,
        "title": "Implement User Authentication with LocalStorage",
        "description": "Develop registration and login functionality for both Farmers and Buyers. User profiles, including their role, will be stored in the 'users' array in localStorage. A simple session management system will use localStorage to track the currently logged-in user.",
        "status": "pending",
        "dependencies": [
          1
        ],
        "priority": "high",
        "details": "Create HTML forms for registration (email, password, role dropdown) and login. In `app.js`, write functions to handle form submissions. The registration function should hash the password (using a simple client-side library like `crypto-js` is a good practice for a school project, but not strictly required by the PRD), create a user object with a unique ID, and add it to the 'users' array in localStorage. The login function should find a user by email, verify the password, and if successful, store the user object in a session key (e.g., `localStorage.setItem('session', JSON.stringify(user))`). A logout function should clear this session key.",
        "testStrategy": "1. Register a new Farmer and a new Buyer. Verify they are added to the 'users' array in localStorage. 2. Attempt to register with an existing email to ensure duplicates are prevented. 3. Log in with each user and confirm a 'session' object is created in localStorage. 4. Log out and confirm the 'session' object is removed. 5. Attempt to log in with incorrect credentials to verify failure.",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Registration and Login HTML Forms",
            "description": "Add HTML forms to `index.html` for user registration and login. The registration form should include fields for email, password, and a dropdown for selecting the user role (Farmer or Buyer). The login form needs email and password fields.",
            "dependencies": [],
            "details": "In `index.html`, create two `<form>` elements. The registration form should have an id like `registration-form` and include inputs for email, password, and a `<select>` element for 'role'. The login form should have an id like `login-form` and include inputs for email and password. Both forms need a submit button.",
            "status": "pending",
            "testStrategy": "Open `index.html` in a web browser and visually confirm that both the registration and login forms are rendered correctly with all specified input fields and buttons."
          },
          {
            "id": 2,
            "title": "Implement User Registration Logic in app.js",
            "description": "Write a JavaScript function to handle user registration. This function will be triggered by the registration form submission, validate the data, create a new user object, and store it in the 'users' array in localStorage.",
            "dependencies": [
              1
            ],
            "details": "In `app.js`, create a `handleRegistration` function. Add an event listener to the `registration-form`. Inside the function, prevent default form submission, get values from the form, and check if the email already exists in the 'users' array from localStorage. If not, create a new user object with a unique ID, email, password, and role. Save the updated users array back to `localStorage`.",
            "status": "pending",
            "testStrategy": "1. Submit the registration form with valid data. 2. Use browser developer tools to inspect localStorage and verify the 'users' array contains the new user object. 3. Attempt to register again with the same email and confirm that the registration is rejected and no duplicate user is added."
          },
          {
            "id": 3,
            "title": "Implement User Login Functionality in app.js",
            "description": "Develop the JavaScript logic for user login. This function will verify user credentials against the data stored in localStorage and establish a user session upon successful authentication.",
            "dependencies": [
              2
            ],
            "details": "In `app.js`, create a `handleLogin` function and attach it to the `login-form`'s submit event. This function will retrieve the email and password from the form inputs. It will then load the 'users' array from `localStorage`, find a user with a matching email, and verify the password. If credentials are correct, store the complete user object in `localStorage` under the key 'session' as a JSON string.",
            "status": "pending",
            "testStrategy": "1. After registering a user, attempt to log in with the correct credentials. 2. Verify in localStorage that a 'session' key has been created and its value is the JSON string of the logged-in user. 3. Attempt to log in with incorrect credentials and ensure the 'session' key is not created or is empty."
          },
          {
            "id": 4,
            "title": "Implement User Logout and Session Clearing",
            "description": "Create a function to handle user logout. This involves clearing the session data from localStorage and providing a UI element for the user to trigger this action.",
            "dependencies": [
              3
            ],
            "details": "Add a 'Logout' button to `index.html`, which will be shown conditionally. In `app.js`, create a `handleLogout` function. This function will remove the 'session' item from `localStorage` using `localStorage.removeItem('session')`. Attach an event listener to the logout button to call this function. After logout, the UI should be updated to reflect the logged-out state.",
            "status": "pending",
            "testStrategy": "1. Log in as a user, confirming the 'session' key exists in localStorage. 2. Click the 'Logout' button. 3. Verify that the 'session' key has been completely removed from localStorage."
          },
          {
            "id": 5,
            "title": "Implement Session-Based UI State Management",
            "description": "Add logic to dynamically update the UI based on the user's authentication state. This includes showing or hiding elements like login/registration forms, user-specific content, and the logout button.",
            "dependencies": [
              4
            ],
            "details": "Create a function in `app.js`, e.g., `updateUI()`, that checks for the 'session' key in `localStorage`. If a session exists, hide the login and registration forms and show the logout button and a welcome message. If no session exists, show the forms and hide the user-specific elements. This function must be called on page load and after any login or logout action to ensure the UI is always in sync.",
            "status": "pending",
            "testStrategy": "1. On initial page load, verify only login/registration forms are visible. 2. After logging in, verify the forms are hidden and user-specific elements (like logout button) appear. 3. Refresh the page and confirm the logged-in UI state persists. 4. After logging out, verify the UI reverts to its initial logged-out state."
          }
        ]
      },
      {
        "id": 3,
        "title": "Develop Product Listing and Browsing UI",
        "description": "Create the main marketplace page where all users can browse available products. This page will dynamically render product data fetched from the 'products' array in localStorage.",
        "status": "pending",
        "dependencies": [
          1
        ],
        "priority": "high",
        "details": "Develop a function `renderProducts()` in `app.js`. This function will:\n1. Fetch the products array: `JSON.parse(localStorage.getItem('products'))`.\n2. Iterate through the array.\n3. For each product, dynamically create an HTML card element displaying its name, image, price, and description.\n4t. Append these cards to a main container in `index.html`. \nImplement a simple search bar that filters products by name on keyup events.",
        "testStrategy": "Manually add a few sample product objects to the 'products' key in localStorage using browser dev tools. Refresh the page and verify that all products are displayed correctly. Use the search bar to filter the products and confirm it works as expected.",
        "subtasks": [
          {
            "id": 1,
            "title": "Define HTML Structure for a Single Product Card",
            "description": "Create a function within `app.js` that takes a product object and returns the corresponding HTML string or DOM element for a product card. This will serve as the template for rendering each product.",
            "dependencies": [],
            "details": "In `app.js`, create a helper function, e.g., `createProductCard(product)`. This function will receive a product object and generate a `div` element with the class 'product-card'. The card must contain elements to display the product's image (imageUrl), name, price, and description.",
            "status": "pending",
            "testStrategy": "Manually call this function with a mock product object in the browser console and verify that it returns the expected HTML structure."
          },
          {
            "id": 2,
            "title": "Develop the `renderProducts` Function to Display Products",
            "description": "Create the main `renderProducts` function in `app.js`. This function will be responsible for clearing the existing product list and rendering a new list of products passed to it.",
            "dependencies": [
              1
            ],
            "details": "The `renderProducts(products)` function should first get the `#product-listing-container` element. It must clear any existing content within this container (e.g., using `innerHTML = ''`). Then, it will iterate through the `products` array passed as an argument. For each product, it will call `createProductCard(product)` and append the returned element to the container.",
            "status": "pending",
            "testStrategy": "Create a mock array of product objects and pass it to `renderProducts()` from the console. Verify that the correct number of product cards appear on the page."
          },
          {
            "id": 3,
            "title": "Fetch Products and Trigger Initial Render on Page Load",
            "description": "Integrate the product rendering logic into the page's startup sequence. When the DOM is fully loaded, fetch the products from localStorage and display them.",
            "dependencies": [
              2
            ],
            "details": "Within the existing `DOMContentLoaded` event listener in `app.js`, add logic to get the 'products' item from `localStorage`. Parse the JSON string into an array. If the array is not null or empty, call the `renderProducts()` function, passing the full product array to it.",
            "status": "pending",
            "testStrategy": "Use the `initializeMockData()` function (or manually add products to localStorage) and then refresh the page. Verify that all products from localStorage are displayed correctly on initial load."
          },
          {
            "id": 4,
            "title": "Add Event Listener for the Search Bar",
            "description": "Attach a 'keyup' event listener to the search bar element to capture user input for filtering products.",
            "dependencies": [],
            "details": "In `app.js`, likely within the `DOMContentLoaded` listener, get the element with `id='search-bar'`. Add a 'keyup' event listener to this element. The callback function for this listener will contain the filtering logic.",
            "status": "pending",
            "testStrategy": "Type into the search bar and add a `console.log` inside the event listener to confirm that it fires on each key press and captures the input value correctly."
          },
          {
            "id": 5,
            "title": "Implement Search Filtering and Re-rendering Logic",
            "description": "Implement the logic within the search bar's event listener to filter the products by name and update the UI.",
            "dependencies": [
              3,
              4
            ],
            "details": "Inside the 'keyup' event listener, get the current search term from the search bar and convert it to lowercase. Fetch the complete list of products from `localStorage`. Use `Array.prototype.filter()` to create a new array of products where the product's name (also converted to lowercase) includes the search term. Finally, call `renderProducts()` with this new filtered array to update the display.",
            "status": "pending",
            "testStrategy": "With products displayed, type a partial name of a product (e.g., 'app' for 'Apples') into the search bar. Verify that the product list updates in real-time to show only matching products. Deleting text from the search bar should show more products again."
          }
        ]
      },
      {
        "id": 4,
        "title": "Implement Product CRUD Operations for Farmers",
        "description": "Build the interface and logic for authenticated farmers to perform Create, Read, Update, and Delete (CRUD) operations on their own product listings. Product data is managed within the 'products' array in localStorage.",
        "status": "pending",
        "dependencies": [
          2,
          3
        ],
        "priority": "high",
        "details": "Create a separate HTML page or a modal for adding/editing products, with fields for name, description, price, and an initial text input for an image URL. Conditionally render 'Add Product', 'Edit', and 'Delete' buttons on the UI only for logged-in farmers. The 'Add' function will push a new product object (with a unique ID and the farmer's ID) to the 'products' array. The 'Edit' and 'Delete' functions must verify that the `product.farmerId` matches the logged-in farmer's ID before modifying or removing the product from the array. All changes should be persisted to localStorage.",
        "testStrategy": "1. Log in as a farmer. 2. Create a new product and verify it appears on the main product listing. 3. Edit the product's details and confirm the changes are reflected. 4. Delete the product and ensure it's removed from the listing. 5. Manually create a product for a different farmer and log in as the first farmer; verify that the edit/delete options are not available for that product.",
        "subtasks": [
          {
            "id": 1,
            "title": "Conditionally Render Farmer CRUD Buttons",
            "description": "Modify the `renderProducts` function in `app.js` to conditionally display 'Edit' and 'Delete' buttons on product cards. These buttons should only appear if the logged-in user is a 'farmer' and their ID matches the product's `farmerId`. Also, add an 'Add New Product' button, visible only to logged-in farmers, likely above the product list.",
            "dependencies": [],
            "details": "In app.js, locate the `renderProducts` function. Inside the loop that generates product card HTML, get the current user via `getCurrentUser()`. Add a conditional block: `if (currentUser && currentUser.role === 'farmer' && currentUser.id === product.farmerId)`. If true, append the HTML for edit and delete buttons with `data-product-id` attributes. Similarly, in `updateUI`, show/hide a dedicated 'Add Product' button (`#add-product-btn`).",
            "status": "pending",
            "testStrategy": "Log in as a farmer. Verify 'Add Product' button is visible. Verify 'Edit' and 'Delete' buttons appear only on products they own. Log in as a buyer or log out and confirm no CRUD buttons are visible."
          },
          {
            "id": 2,
            "title": "Create HTML and CSS for Product Form Modal",
            "description": "Add a hidden modal to `index.html` that will serve as the form for creating and editing products. The modal should include a form with input fields for product name, description, price, and image URL, along with 'Save' and 'Cancel' buttons.",
            "dependencies": [],
            "details": "In `index.html`, create a `div` with an ID like `product-modal` and a class for styling (e.g., 'hidden'). Inside, build a form with `<label>` and `<input>` elements for 'name' (text), 'description' (textarea), 'price' (number), and 'imageUrl' (text). Add a hidden input to store the `productId` for editing. Add 'Save' and 'Cancel' buttons. Use CSS in `style.css` to style the modal, overlay, and position it, ensuring it is hidden by default.",
            "status": "pending",
            "testStrategy": "Verify the modal is not visible on page load. Manually remove the 'hidden' class using browser dev tools to check its layout and styling."
          },
          {
            "id": 3,
            "title": "Implement 'Create Product' Functionality",
            "description": "Wire up the 'Add New Product' button and the product form modal to allow farmers to create new products. The new product should be saved to localStorage with a unique ID and the farmer's ID.",
            "dependencies": [
              1,
              2
            ],
            "details": "In `app.js`, add a click listener to the 'Add Product' button that shows the modal. Add a submit listener to the modal's form. In the handler, prevent default submission, read form values, get the logged-in farmer's ID from `getCurrentUser()`, and create a new product object `{ id: Date.now(), farmerId: ..., ... }`. Fetch the current products array using `getProducts()`, push the new product, save it using `saveProducts()`, then re-render the list and hide the modal.",
            "status": "pending",
            "testStrategy": "As a farmer, click 'Add New Product'. Fill out and submit the form. Verify the new product appears on the page and is persisted in localStorage with the correct `farmerId` after a page refresh."
          },
          {
            "id": 4,
            "title": "Implement 'Delete Product' Functionality",
            "description": "Add logic to handle clicks on the 'Delete' button. This should remove the specified product from the `products` array in localStorage, but only if the action is performed by the farmer who owns the product.",
            "dependencies": [
              1
            ],
            "details": "In `app.js`, use event delegation to add a click listener to the `#product-list` container. Check if the clicked element is a 'Delete' button. If so, get the `productId` from its `data-product-id` attribute. Get the current user and products array. Use `Array.filter()` to create a new array excluding the product where `id` matches `productId` AND `farmerId` matches the current user's ID. Save the new array to localStorage and re-render the product list.",
            "status": "pending",
            "testStrategy": "As a farmer, click 'Delete' on a product you own. Verify it is removed from the UI and localStorage. Try to delete another farmer's product (by manipulating the DOM if necessary) and confirm the action fails."
          },
          {
            "id": 5,
            "title": "Implement 'Update Product' Functionality",
            "description": "Enable farmers to edit their existing product listings. The 'Edit' button should populate the modal with existing data, and saving the form should update the correct product in localStorage.",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Extend the event delegation on `#product-list`. On 'Edit' button click, get the `productId`. Find the product in the `products` array. Populate the modal form fields with the product's data. Store the `productId` in the modal's hidden input. Show the modal. Modify the form's submit handler: if the hidden `productId` input has a value, it's an update. Find the product by ID, update its properties, save the full array back to localStorage, and re-render. Clear the hidden input after submission.",
            "status": "pending",
            "testStrategy": "As a farmer, click 'Edit' on a product. Verify the modal appears with the correct data pre-filled. Change the data and save. Confirm the product is updated on the page and in localStorage."
          }
        ]
      },
      {
        "id": 5,
        "title": "Implement Client-Side Image Handling for Products",
        "description": "Enhance the product creation/editing form to allow farmers to upload an image from their device. The image will be converted to a Base64 data URL and stored directly within the product object in localStorage.",
        "status": "pending",
        "dependencies": [
          4
        ],
        "priority": "medium",
        "details": "In the product form, replace the image URL text input with `<input type=\"file\" accept=\"image/*\">`. Use the `FileReader` API in JavaScript to handle the file selection. Create an `onChange` event listener for the file input. Inside the listener, initialize a `new FileReader()`, and use `reader.readAsDataURL(file)`. In the `reader.onload` event handler, the `reader.result` will contain the Base64 string, which can be saved as the `image` property of the product object. When rendering product cards, set the `src` attribute of the `<img>` tag to this Base64 string.",
        "testStrategy": "As a logged-in farmer, create a new product and upload a local image file. Verify the product is saved to localStorage with an 'image' property containing a 'data:image/...' string. Confirm the image is correctly displayed on the product listing page.",
        "subtasks": [
          {
            "id": 1,
            "title": "Update Product Form HTML with File Input and Image Preview Element",
            "description": "Modify the product creation/editing form in `farmer-dashboard.html` to replace the image URL text input with a file input, and add an `<img>` tag for previewing the selected image.",
            "dependencies": [],
            "details": "In `farmer-dashboard.html`, locate the product form (e.g., `#product-form`). Replace the `<input type=\"text\" id=\"product-image\">` with `<input type=\"file\" id=\"product-image-upload\" accept=\"image/*\">`. Immediately after, add an `<img>` element with an ID like `image-preview` to display the selected image.",
            "status": "pending",
            "testStrategy": "Open `farmer-dashboard.html` in the browser. Verify the product form now shows a 'Choose File' button instead of a text input for the image. Confirm an empty image preview element is present."
          },
          {
            "id": 2,
            "title": "Implement an Event Listener for File Input and Image Conversion",
            "description": "In `js/product.js`, create an `onChange` event listener for the new file input. This listener will handle the selected file and convert it to a Base64 data URL using the FileReader API.",
            "dependencies": [
              1
            ],
            "details": "Add a `change` event listener to the `#product-image-upload` element. Inside the handler, check if a file has been selected. If so, create a `new FileReader()`. Use `reader.readAsDataURL(file)` to start the conversion process. This sets up the foundation for previewing and saving the image.",
            "status": "pending",
            "testStrategy": "Select an image file using the new input. Use browser developer tools to place a breakpoint inside the event listener and confirm that a file object is received and `readAsDataURL` is called."
          },
          {
            "id": 3,
            "title": "Display Selected Image Preview in the Form",
            "description": "Extend the file input's event listener to display the converted Base64 image in the preview `<img>` element on the form.",
            "dependencies": [
              2
            ],
            "details": "Inside the `FileReader`'s `onload` event handler, get the Base64 string from `reader.result`. Set the `src` attribute of the `#image-preview` element to this result. This provides immediate visual feedback to the user.",
            "status": "pending",
            "testStrategy": "As a user, select a valid image file from your device. Verify that a preview of the selected image appears within the product form immediately after selection."
          },
          {
            "id": 4,
            "title": "Integrate Base64 Image into Product Save/Update Logic",
            "description": "Modify the product form's submission handler to save the Base64 string as the `image` property of the product object in localStorage.",
            "dependencies": [
              3
            ],
            "details": "In the `submit` handler for the product form in `js/product.js`, retrieve the Base64 string from the `#image-preview` element's `src` attribute. When creating the `product` object, set its `image` property to this Base64 string before saving it to localStorage. Ensure that if no new image is selected during an edit, the existing image data is preserved.",
            "status": "pending",
            "testStrategy": "Create a new product and upload an image. Use browser developer tools to inspect localStorage. Verify the new product object in the 'products' array has an `image` property that starts with 'data:image/...'. Edit a product without changing the image and confirm the original image data is not lost."
          },
          {
            "id": 5,
            "title": "Verify Product Images Render Correctly from Base64 Data",
            "description": "Ensure that product cards on all relevant pages correctly display images using the Base64 data URL stored in the product object.",
            "dependencies": [
              4
            ],
            "details": "The existing product rendering functions (e.g., in `js/app.js` or `js/product.js`) likely use `<img src=\"${product.image}\">`. This should work with Base64 strings. Manually test by creating a product with an image and navigating to the product list page (`index.html`) and the farmer's dashboard to confirm the image is displayed correctly.",
            "status": "pending",
            "testStrategy": "Log in as a farmer, create a product with an uploaded image. Log out. Log in as a buyer and view the main product page. Confirm the new product's image is visible. Go back to the farmer dashboard and confirm the image is also visible there."
          }
        ]
      },
      {
        "id": 6,
        "title": "Implement Shopping Cart Functionality",
        "description": "Enable buyers to add products to a shopping cart, view the cart's contents, update item quantities, and remove items. The cart state will be persisted across sessions using localStorage.",
        "status": "pending",
        "dependencies": [
          2,
          3
        ],
        "priority": "high",
        "details": "On product cards, add an 'Add to Cart' button. When clicked, an item is added to the 'cart_items' array in localStorage, containing `cartId` (linked to user), `productId`, and `quantity`. If the user has no cart, create one in the 'carts' array. Create a `cart.html` page that reads the user's cart data and displays each item, its quantity, and subtotal. Implement '+' and '-' buttons to update quantities and a 'Remove' button to delete items from 'cart_items'. The total price should be calculated and displayed dynamically. All changes must immediately update localStorage.",
        "testStrategy": "1. Log in as a buyer. 2. Add several different products to the cart. 3. Navigate to the cart page and verify all items and the total are correct. 4. Update the quantity of an item and check that the subtotal and grand total update. 5. Remove an item and confirm it's gone. 6. Log out and log back in to ensure the cart's contents are preserved.",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement 'Add to Cart' Button on Product Cards",
            "description": "Modify the product rendering logic to include an 'Add to Cart' button for each product. Implement the corresponding click handler to add items to the user's cart in localStorage.",
            "dependencies": [],
            "details": "Locate the function responsible for rendering product listings. For each product card, append a button with the text 'Add to Cart'. Create a click event handler for this button that identifies the current logged-in user, finds or creates a corresponding cart in the 'carts' localStorage array, and then adds or updates the item in the 'cart_items' array. If the item already exists for that cart, increment its quantity; otherwise, create a new entry with `cartId`, `productId`, and `quantity: 1`.",
            "status": "pending",
            "testStrategy": "Log in as a buyer. Click 'Add to Cart' on a product. Inspect localStorage to verify 'carts' and 'cart_items' arrays are correctly populated. Click the same button again and confirm the quantity is incremented in 'cart_items'."
          },
          {
            "id": 2,
            "title": "Create HTML Structure for the Shopping Cart Page",
            "description": "Create a new `cart.html` file that will serve as the shopping cart view. This file will contain the basic layout for displaying cart items, the total price, and navigation.",
            "dependencies": [],
            "details": "Create a new file named `cart.html`. This file should include the shared site header and footer. In the main content area, add a container element (e.g., `<div id=\"cart-items-container\">`) for the list of items and a separate element to display the grand total (e.g., `<h2>Total: <span id=\"cart-total\">$0.00</span></h2>`). Also, add a link to `cart.html` in the main site navigation bar so users can access it.",
            "status": "pending",
            "testStrategy": "Open `cart.html` in a browser. Verify that the basic page structure, including header, footer, and placeholder sections for items and total, is rendered correctly. Confirm the navigation link to the cart page works."
          },
          {
            "id": 3,
            "title": "Fetch and Display Cart Contents on cart.html",
            "description": "Implement the JavaScript logic for `cart.html` to fetch the current user's cart data from localStorage and render the items dynamically on the page.",
            "dependencies": [
              2
            ],
            "details": "Create a script for `cart.html` that runs on page load. This script will: 1. Get the logged-in user. 2. Find their cart and associated items from localStorage. 3. For each item in 'cart_items', retrieve the full product details (name, image, price) from the 'products' array. 4. Dynamically generate and insert HTML into `#cart-items-container` to display each item's details, quantity, and subtotal. Include `+`, `-`, and 'Remove' buttons for each item.",
            "status": "pending",
            "testStrategy": "After adding several items to the cart, navigate to `cart.html`. Verify that all items are displayed with the correct image, name, price, quantity, and a calculated subtotal for each."
          },
          {
            "id": 4,
            "title": "Implement Item Quantity and Removal Controls",
            "description": "Add event listeners to the quantity update (`+`, `-`) and 'Remove' buttons for each item in the cart, allowing users to modify their cart contents.",
            "dependencies": [
              3
            ],
            "details": "Using event delegation on the `#cart-items-container`, add listeners for clicks on the `+`, `-`, and 'Remove' buttons. The '+' handler increments the item's quantity in localStorage. The '-' handler decrements quantity (and removes the item if quantity reaches 0). The 'Remove' handler deletes the item from the 'cart_items' array. After any change to localStorage, re-render the cart display to show the updated state.",
            "status": "pending",
            "testStrategy": "On the cart page, click '+' on an item and verify its quantity and subtotal update. Click '-' and verify the change. Click 'Remove' on an item and verify it is removed from the view. Confirm localStorage reflects all changes immediately."
          },
          {
            "id": 5,
            "title": "Calculate and Dynamically Update Cart Total",
            "description": "Create and integrate a function to calculate the total price of all items in the cart. This total must update automatically whenever the cart's contents change.",
            "dependencies": [
              3,
              4
            ],
            "details": "Create a `updateGrandTotal` function. This function will read the current user's `cart_items` from localStorage, retrieve the price for each product, calculate the subtotal for each item (`price * quantity`), and sum them up to get the grand total. This function must be called on the initial load of `cart.html` and after any action performed in subtask 4 (quantity change or item removal). The result should be displayed in the `#cart-total` element.",
            "status": "pending",
            "testStrategy": "Add multiple items to cart. Go to `cart.html` and verify the total is correct. Increase an item's quantity and see the total increase. Remove an item and see the total decrease. Empty the cart and verify the total is $0.00."
          }
        ]
      },
      {
        "id": 7,
        "title": "Develop Order Creation and Checkout Flow",
        "description": "Implement the process for a buyer to convert their shopping cart into a formal order. This action will create new records in the 'orders' and 'order_items' collections in localStorage and clear the user's cart.",
        "status": "pending",
        "dependencies": [
          6
        ],
        "priority": "high",
        "details": "On the cart page, add a 'Proceed to Checkout' button. Clicking this should navigate the user to a checkout summary page. On this page, a 'Confirm Order' button will trigger the core logic: \n1. Create a new order object in the 'orders' array with a unique ID, the current `userId`, `totalAmount`, and an initial `status` of 'pending_payment'. \n2. Iterate through the user's 'cart_items', create corresponding 'order_items' linked to the new `orderId`, and add them to the 'order_items' array. \n3. Clear the user's 'cart' and 'cart_items' from localStorage. \n4. Redirect the user to the payment step.",
        "testStrategy": "As a buyer, add items to the cart and proceed to checkout. After confirming the order, use developer tools to inspect localStorage. Verify that a new entry exists in 'orders', corresponding entries exist in 'order_items', and that the 'carts' and 'cart_items' for that user are now empty.",
        "subtasks": [
          {
            "id": 1,
            "title": "Add 'Proceed to Checkout' Button and Navigation",
            "description": "Add a 'Proceed to Checkout' button to the cart page. This button should be prominently displayed, likely near the cart total. When clicked, it should navigate the user to a new checkout summary page.",
            "dependencies": [],
            "details": "In `cart.html`, add a button element with an ID like `checkout-btn`. In `js/cart.js`, add an event listener for this button that triggers `window.location.href = 'checkout.html';`. Ensure this button is only enabled when the cart is not empty.",
            "status": "pending",
            "testStrategy": "1. Add items to the cart and go to `cart.html`. Verify the 'Proceed to Checkout' button is visible. 2. Click the button and confirm it redirects to a (currently blank) `checkout.html` page. 3. Empty the cart and verify the button is disabled or hidden."
          },
          {
            "id": 2,
            "title": "Create Checkout Summary Page UI",
            "description": "Create a new `checkout.html` file to serve as the order summary page. This page will display a summary of the items from the cart, the total amount, and a 'Confirm Order' button.",
            "dependencies": [
              1
            ],
            "details": "Create `checkout.html`. It should include a container (e.g., `<div id=\"order-summary-container\"></div>`) to dynamically display items, a placeholder for the total amount (e.g., `<span id=\"total-amount\"></span>`), and a '<button id=\"confirm-order-btn\">Confirm Order</button>'. Link to the relevant JS files.",
            "status": "pending",
            "testStrategy": "Navigate to `checkout.html` directly in the browser. Verify that the basic page structure, including the title, summary container, and 'Confirm Order' button, renders correctly without any data."
          },
          {
            "id": 3,
            "title": "Implement Order Summary Display Logic",
            "description": "Write the JavaScript logic to fetch the user's cart data from localStorage and dynamically render it on the `checkout.html` page. This gives the user a final review before confirming.",
            "dependencies": [
              2
            ],
            "details": "Create a new `js/checkout.js` file or add to `app.js`. On page load for `checkout.html`, call a function like `renderOrderSummary()`. This function will retrieve items from 'cart_items' and 'products' in localStorage, calculate the total, and populate the `order-summary-container` and `total-amount` elements created in the previous task.",
            "status": "pending",
            "testStrategy": "1. Add items to the cart and proceed to the checkout page. 2. Verify that all items, their quantities, prices, and the correct total amount are displayed on the checkout summary page, matching the contents of the cart."
          },
          {
            "id": 4,
            "title": "Implement Core Order Creation in LocalStorage",
            "description": "Implement the core logic that executes when the 'Confirm Order' button is clicked. This will create new records in the 'orders' and 'order_items' arrays in localStorage.",
            "dependencies": [
              3
            ],
            "details": "In the checkout JS file, add an event listener to the `confirm-order-btn`. The handler should: 1. Get current `userId` and cart total. 2. Create a new order object (with unique ID, userId, totalAmount, status 'pending_payment', timestamp) and add it to the 'orders' array in localStorage. 3. Iterate through 'cart_items', create corresponding 'order_items' (linking to the new orderId), and add them to the 'order_items' array in localStorage.",
            "status": "pending",
            "testStrategy": "Click 'Confirm Order'. Use browser dev tools to inspect localStorage. Verify that a new object has been added to the 'orders' array and that corresponding objects for each cart item have been added to the 'order_items' array with the correct `orderId`."
          },
          {
            "id": 5,
            "title": "Clear Cart and Redirect to Payment",
            "description": "After successfully creating the order and order_items records in localStorage, clear the user's cart data and redirect them to the payment page to complete the transaction.",
            "dependencies": [
              4
            ],
            "details": "Extend the 'Confirm Order' button's event handler. After the new order records are saved to localStorage, find and remove the user's cart from the 'carts' array and all their items from the 'cart_items' array. Finally, redirect the user using `window.location.href = 'payment.html?orderId=<new_order_id>';`.",
            "status": "pending",
            "testStrategy": "After confirming an order, inspect localStorage to verify that the user's 'cart' and 'cart_items' records have been deleted. Check that the browser is redirected to the payment page with the correct new order ID in the URL query string."
          }
        ]
      },
      {
        "id": 8,
        "title": "Integrate Stripe for Payment Processing",
        "description": "Integrate the Stripe.js client-side library to handle payments. After an order is confirmed, the user will complete payment via a Stripe-hosted checkout. A successful payment will update the order's status in localStorage.",
        "status": "pending",
        "dependencies": [
          7
        ],
        "priority": "high",
        "details": "For this client-side-only project, use Stripe Checkout. \n1. Include the Stripe.js script in your HTML: `<script src=\"https://js.stripe.com/v3/\"></script>`. \n2. On the payment page, initialize Stripe with your public test key. \n3. When the 'Pay with Stripe' button is clicked, store the `orderId` in `sessionStorage` to retrieve it after redirection. \n4. Call `stripe.redirectToCheckout` with `line_items` (prices must be pre-configured in your Stripe Dashboard), `mode: 'payment'`, and `successUrl` / `cancelUrl` pointing to pages in your project. \n5. On the `success.html` page, retrieve the `orderId` from `sessionStorage`, find the corresponding order in localStorage, and update its status to 'paid'.",
        "testStrategy": "Using Stripe's test keys and test card numbers, complete a checkout. Verify that the user is redirected to the Stripe-hosted page, and after successful payment, lands on your `successUrl`. Inspect localStorage to confirm the relevant order's status has been updated from 'pending_payment' to 'paid'. Test the cancellation flow as well.",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Payment-Related HTML Pages and Include Stripe.js",
            "description": "Create the necessary success and cancellation pages for the Stripe redirect flow. Include the Stripe.js V3 script tag in all relevant HTML files to enable Stripe functionality.",
            "dependencies": [],
            "details": "Create two new files: `success.html` and `cancel.html`. In `order-confirmation.html`, `success.html`, and `cancel.html`, add the following script tag inside the `<head>` section: `<script src=\"https://js.stripe.com/v3/\"></script>`.",
            "status": "pending",
            "testStrategy": "Verify that the new files `success.html` and `cancel.html` exist. Inspect the source code of `order-confirmation.html`, `success.html`, and `cancel.html` to confirm the Stripe.js script tag is present in the head of each document."
          },
          {
            "id": 2,
            "title": "Implement Stripe Initialization and Checkout Redirection",
            "description": "On the order confirmation page, initialize Stripe and add an event listener to the payment button that triggers the redirect to Stripe's hosted checkout page.",
            "dependencies": [
              1
            ],
            "details": "In a script tag on `order-confirmation.html`, initialize Stripe using a test public key: `const stripe = Stripe('YOUR_TEST_PUBLIC_KEY');`. Add a click event listener to the `#pay-button`. Inside the handler, call `stripe.redirectToCheckout` with hardcoded `successUrl: 'success.html'`, `cancelUrl: 'cancel.html'`, and a placeholder for `line_items`.",
            "status": "pending",
            "testStrategy": "On `order-confirmation.html`, click the 'Proceed to Payment' button. Verify that the browser redirects to a Stripe checkout page. This test will fail payment due to placeholder line items, but the redirection успех is the key metric."
          },
          {
            "id": 3,
            "title": "Dynamically Generate `line_items` for Stripe Checkout",
            "description": "Enhance the checkout redirection logic to dynamically build the `line_items` array based on the contents of the user's order stored in localStorage.",
            "dependencies": [
              2
            ],
            "details": "In the `#pay-button` event listener on `order-confirmation.html`, retrieve the `currentOrderId` from `sessionStorage`. Fetch the `orders` from `localStorage` and find the matching order. Create a mapping object like `const productToPriceId = { 'prod_id_1': 'price_id_abc', ... };`. Iterate through the order items, use the map to find the Stripe Price ID for each product, and construct the final `line_items` array for `redirectToCheckout`.",
            "status": "pending",
            "testStrategy": "Use browser dev tools to set up an order in localStorage. Click the payment button and inspect the network request or Stripe logs (if available) to ensure the `line_items` sent to `redirectToCheckout` correctly match the items and quantities from the order."
          },
          {
            "id": 4,
            "title": "Implement Payment Success Handling and Order Status Update",
            "description": "On the `success.html` page, retrieve the order ID, find the corresponding order in localStorage, and update its status to 'paid'.",
            "dependencies": [
              1
            ],
            "details": "Create a script in `success.html` that runs on `DOMContentLoaded`. It will get the `currentOrderId` from `sessionStorage`. Then, it will retrieve the 'orders' array from `localStorage`, find the order with the matching `orderId`, change its `status` property from 'pending_payment' to 'paid', and write the modified array back to `localStorage`. Display a user-friendly success message and clear the `currentOrderId` from sessionStorage.",
            "status": "pending",
            "testStrategy": "After a successful test payment, land on `success.html`. Open developer tools and inspect localStorage. Verify that the `status` of the relevant order inside the 'orders' array has been updated to 'paid'."
          },
          {
            "id": 5,
            "title": "Create Payment Cancellation Page User Experience",
            "description": "Develop the `cancel.html` page to provide clear feedback to the user that their payment was not completed and offer them a path acessórios to try again.",
            "dependencies": [
              1
            ],
            "details": "In `cancel.html`, add HTML content that informs the user their payment was canceled or failed. Include at least one anchor tag (`<a>`) linking back to `order-confirmation.html` so they can attempt payment again.",
            "status": "pending",
            "testStrategy": "During a Stripe checkout session, click the 'back' or 'cancel' link provided by the Stripe UI. Verify that you are redirected to your `cancel.html` page and that it displays the expected cancellation message and a link to return to the payment process."
          }
        ]
      },
      {
        "id": 9,
        "title": "Create Farmer Dashboard for Order and Product Management",
        "description": "Build a dedicated dashboard for farmers to view their incoming orders and manage their product listings. This provides farmers with central control over their sales and inventory.",
        "status": "pending",
        "dependencies": [
          4,
          8
        ],
        "priority": "medium",
        "details": "Create a `dashboard.html` page protected for farmer roles. On load, the script will:\n1. Get all `orders` and `order_items` from localStorage. \n2. Get all `products` belonging to the logged-in farmer. \n3. Filter `order_items` to find only those that match the farmer's product IDs. \n4. Group these items by `orderId` and display the relevant orders, showing buyer info, product details, and quantity. \n5. For each order, provide a dropdown or buttons to update the status (e.g., 'Paid' -> 'Processing' -> 'Shipped'). This action will update the status field in the main 'orders' object in localStorage. The dashboard should also link to the product management (CRUD) interface.",
        "testStrategy": "1. As a buyer, place an order containing products from two different farmers. 2. Log in as Farmer A. Verify their dashboard shows only the order items related to their products. 3. Update an order's status to 'Shipped'. 4. Log in as Farmer B and verify they see their portion of the order and that the status change from Farmer A is not reflected on their view of the same order (as status is on the order level, this requires careful UI design).",
        "subtasks": [
          {
            "id": 1,
            "title": "Create and Secure Farmer Dashboard HTML and JS Files",
            "description": "Create the basic `dashboard.html` file and its corresponding JavaScript file (`dashboard.js`). Implement route protection to ensure only users with the 'farmer' role can access this page.",
            "dependencies": [],
            "details": "Create a new `dashboard.html` file within the project root. This file should have a basic structure with a main container for orders and a link for product management. Link a new `js/dashboard.js` script. In this script, add a function that runs on page load to check `localStorage` for a session object and verify the user's role is 'farmer'. If the check fails, redirect the user to `login.html`.",
            "status": "pending",
            "testStrategy": "1. Attempt to navigate directly to `dashboard.html` while not logged in; verify redirection to the login page. 2. Log in as a 'Buyer' and attempt to access `dashboard.html`; verify redirection. 3. Log in as a 'Farmer' and verify `dashboard.html` loads successfully."
          },
          {
            "id": 2,
            "title": "Fetch and Render Farmer-Specific Orders on Dashboard",
            "description": "Implement the core logic in `dashboard.js` to retrieve data from localStorage, identify orders relevant to the logged-in farmer, and display them on the page.",
            "dependencies": [
              1
            ],
            "details": "Within `dashboard.js`, create a function to be called after the role check. This function will: 1. Get the logged-in farmer's ID from the session. 2. Load 'products', 'orders', and 'order_items' from localStorage. 3. Create a list of product IDs owned by the farmer. 4. Filter 'order_items' to find only those matching the farmer's product IDs. 5. Group the filtered items by `orderId`. 6. For each unique order, dynamically generate and inject HTML into the dashboard to display the order details, including the specific products, quantities, and prices for that farmer.",
            "status": "pending",
            "testStrategy": "1. As a buyer, place an order with products from two different farmers. 2. Log in as Farmer A. Verify their dashboard shows an order containing only their products. 3. Log in as Farmer B and verify their dashboard shows the same order but only with their products listed."
          },
          {
            "id": 3,
            "title": "Implement Order Status Update Functionality",
            "description": "Add an interactive element, such as a dropdown menu, to each displayed order, allowing the farmer to update the order's status. The change should be saved back to localStorage.",
            "dependencies": [
              2
            ],
            "details": "For each order rendered on the dashboard, append a `<select>` element populated with status options (e.g., 'Paid', 'Processing', 'Shipped'). Set the dropdown's initial value to the order's current status. Attach an 'change' event listener that, when triggered, gets the `orderId` (from a data-attribute) and the new status. The listener will then load the 'orders' array from localStorage, find the corresponding order object by ID, update its 'status' field, and save the entire 'orders' array back to localStorage.",
            "status": "pending",
            "testStrategy": "1. Log in as a farmer and view an order with 'Paid' status. 2. Change the status to 'Processing' using the dropdown. 3. Refresh the page and verify the status remains 'Processing'. 4. Use browser developer tools to inspect localStorage and confirm the 'status' field for that specific order object has been updated."
          },
          {
            "id": 4,
            "title": "Display Buyer Information and Add Product Management Link",
            "description": "Enhance the order display by showing the buyer's information. Also, add a clear and functional link for the farmer to navigate to their product management page.",
            "dependencies": [
              2
            ],
            "details": "In `dashboard.html`, add a prominent `<a>` tag or button with the text 'Manage My Products' that links to the existing product CRUD page. In `dashboard.js`, modify the order rendering logic: for each order, use the `userId` from the order object to find the corresponding user in the 'users' array from localStorage. Display the buyer's email or name next to the order details.",
            "status": "pending",
            "testStrategy": "1. On the farmer dashboard, verify each order displays the correct buyer's email. 2. Click the 'Manage My Products' link. 3. Verify that you are successfully navigated to the product creation/editing interface."
          },
          {
            "id": 5,
            "title": "Style Dashboard UI for Consistency and Readability",
            "description": "Apply CSS to the dashboard to ensure its appearance is consistent with the rest of the application, the layout is organized, and the information is presented clearly.",
            "dependencies": [
              3,
              4
            ],
            "details": "Create or update a project-wide CSS file to style the elements on `dashboard.html`. Use Flexbox or CSS Grid to structure the main layout. Style the individual order 'cards' to clearly separate them. Apply consistent styling to buttons, dropdowns, and typography to match the application's theme. Ensure the layout is responsive and usable on smaller screens.",
            "status": "pending",
            "testStrategy": "1. Open the dashboard in a desktop browser and verify the layout is clean and all information is readable. 2. Use browser developer tools to simulate a mobile device viewport. 3. Verify the layout adjusts correctly and remains usable without horizontal scrolling."
          }
        ]
      },
      {
        "id": 10,
        "title": "Implement Buyer Order History and UI/UX Refinements",
        "description": "Create a dashboard for buyers to view their order history and track statuses. Implement global UI/UX improvements such as notifications, form validation, and mobile-responsive design.",
        "status": "pending",
        "dependencies": [
          8,
          9
        ],
        "priority": "medium",
        "details": "1. **Buyer Dashboard:** Create a profile page for logged-in buyers. Fetch all orders from localStorage where the `userId` matches the current buyer. Display a list of orders with their ID, date, total amount, and current status. \n2. **Responsiveness:** Use CSS media queries or a framework like Bootstrap to ensure the layout is usable on mobile, tablet, and desktop screens. \n3. **Notifications:** Implement a simple JavaScript function to show temporary feedback messages (e.g., 'Item added to cart', 'Order placed successfully') in a designated element. \n4. **Validation:** Add `required` attributes and `pattern` attributes (for emails, etc.) to HTML forms for basic client-side validation.",
        "testStrategy": "1. As a buyer, place an order. Navigate to the buyer dashboard and verify the order appears with the correct status. 2. Log in as a farmer and update the order status. Log back in as the buyer and confirm the status has updated. 3. Resize the browser window to a mobile width and verify the layout adjusts cleanly. 4. Test all forms by submitting them empty or with invalid data to ensure validation messages appear.",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-10-15T15:01:27.226Z",
      "updated": "2025-10-16T04:44:47.996Z",
      "description": "Tasks for master context"
    }
  }
}