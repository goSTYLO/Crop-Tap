# Task ID: 14
# Title: Set Up Basic Frontend Structure (HTML, CSS, JS)
# Status: pending
# Dependencies: 1
# Priority: low
# Description: Create the foundational HTML files for the main user-facing pages, link a CSS framework like Bootstrap, and set up the basic JavaScript file structure.
# Details:
In a `public` directory served by Express static middleware, create HTML files: `index.html` (product listing), `login.html`, `register.html`, `cart.html`, `checkout.html`, and separate dashboard pages for `admin.html` and `farmer.html`. Link the Bootstrap CDN in the `<head>` of each file for styling. Create a `js/` folder with files like `main.js`, `auth.js`, `products.js` to organize frontend logic.

# Test Strategy:
Start the server and navigate to the URLs corresponding to the static HTML files (e.g., `http://localhost:3000/login.html`). Verify that the pages render correctly with Bootstrap styles applied. Check the browser console for any errors.

# Subtasks:
## 1. Create Public Directory and Main `index.html` File [pending]
### Dependencies: None
### Description: Establish the root directory for static frontend assets and create the primary entry point, `index.html`, which will serve as the product listing page. This is the foundational step for all frontend files.
### Details:
Create a `public` directory in the project root. Inside `public`, create a new file named `index.html`. Add standard HTML5 boilerplate, a title like 'Crop-Tap - Home', and link the Bootstrap 5 CSS CDN in the `<head>`.

## 2. Create `login.html` and `register.html` Authentication Pages [pending]
### Dependencies: 14.1
### Description: Develop the HTML files for user login and registration. These pages will contain the forms necessary for users to authenticate or create a new account.
### Details:
Inside the `public` directory, create `login.html` and `register.html`. Each file should have HTML5 boilerplate and link to the Bootstrap CDN. `login.html` will have a form with email and password fields. `register.html` will have a form with username, email, and password fields.

## 3. Create `cart.html` and `checkout.html` E-commerce Pages [pending]
### Dependencies: 14.1
### Description: Build the HTML structure for the shopping cart and checkout process pages, which are central to the user's purchasing journey.
### Details:
In the `public` directory, create `cart.html` and `checkout.html`. Add HTML5 boilerplate and link the Bootstrap CDN to both. Add placeholder content, such as a table for cart items on `cart.html` and a form for shipping details on `checkout.html`.

## 4. Create `admin.html` and `farmer.html` Dashboard Pages [pending]
### Dependencies: 14.1
### Description: Set up the basic HTML files for the role-specific dashboards, providing dedicated interfaces for administrators and farmers.
### Details:
In the `public` directory, create `admin.html` and `farmer.html`. Add HTML5 boilerplate and Bootstrap CDN links to each. Include a prominent `<h1>` tag like 'Admin Dashboard' and 'Farmer Dashboard' respectively to differentiate them.

## 5. Set Up Frontend JavaScript File Structure and Link Scripts [pending]
### Dependencies: 14.1, 14.2, 14.3, 14.4
### Description: Create the directory and initial files for organizing client-side JavaScript logic and link them to the newly created HTML pages.
### Details:
Inside the `public` directory, create a new folder named `js`. Inside `public/js`, create empty files: `main.js`, `auth.js`, and `products.js`. Add `<script>` tags to the HTML files to load these scripts (e.g., `auth.js` in `login.html`, `products.js` in `index.html`).

