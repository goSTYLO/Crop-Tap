PRODUCT REQUIREMENTS DOCUMENT (PRD)
Project: Crop-Tap eCommerce Web Application
Type: School Project (Web-based eCommerce Platform)

---

# OVERVIEW

Crop-Tap is a web-based eCommerce platform designed to connect local farmers with buyers such as households, vendors, and small businesses.
The system enables farmers to list their products online, buyers to browse and order fresh produce, and farmers to manage their own operations.

Goal:
Provide a functional and simple marketplace for local produce that supports product listings, order management, and online payments — built using local storage for data persistence in a dedicated project folder for easy portability.

Core Users:

* Farmer: manages product listings, fulfills orders, and oversees their own operations.
* Buyer: purchases products from the marketplace.

Value Proposition:

* Digitizes local agricultural sales.
* Provides transparency and efficiency in farmer-to-buyer transactions.
* Acts as a foundation for future eCommerce scalability.

---

# CORE FEATURES

1. USER AUTHENTICATION

   * What it does: Allows registration, login, and profile management for farmers and buyers.
   * Why important: Establishes user access and personalized experience.
   * How it works: Simple authentication system with local storage for user data and session management.

2. PRODUCT MANAGEMENT

   * What it does: Farmers can add, edit, delete, and view their products. Buyers can browse and search.
   * Why important: Core to marketplace operation.
   * How it works: Product data stored in local storage with image handling; farmers manage their own product listings.

3. CART & ORDER SYSTEM

   * What it does: Buyers can add products to their cart and place orders.
   * Why important: Enables the core transaction workflow.
   * How it works: Cart and order data stored in local storage; manages total amount and status.

4. PAYMENT INTEGRATION (STRIPE)

   * What it does: Integrates Stripe for online payments (test mode).
   * Why important: Demonstrates secure digital payment flow.
   * How it works: Frontend interacts with Stripe Payment Intent API; confirmation updates payment and order data in local storage.

5. FARMER DASHBOARD

   * What it does: Central dashboard for farmers to manage their products, orders, and payments.
   * Why important: Provides farmers with operational control over their listings and sales.
   * How it works: Farmer-specific interface for managing their own products and orders stored in local storage.

---

# USER EXPERIENCE

User Personas:

* Farmer: wants easy product upload, order tracking tools, and management of their own operations.
* Buyer: wants a smooth shopping, checkout, and payment experience.

Key User Flows:

1. Buyer: Register → Browse → Add to Cart → Checkout → Pay → Track Order
2. Farmer: Register → Create Product → View Orders → Update Status → Manage Operations

UI/UX Considerations:

* Clean, mobile-responsive layout.
* Role-based dashboards (Farmer, Buyer).
* Clear success/error notifications.
* Intuitive product and order navigation.
* Quick access from cart to checkout.

---

# TECHNICAL ARCHITECTURE

System Components:

* Frontend: HTML, CSS, JavaScript (Bootstrap or optional React)
* Data Storage: Local Storage in dedicated project folder
* File Uploads: Client-side image handling
* Authentication: Local storage-based session management
* Payment Gateway: Stripe API (client-side integration)
* Project Structure: Self-contained folder for easy portability

Data Models (Local Storage Structure):

* users (farmer and buyer profiles)
* products (farmer product listings)
* carts (buyer shopping carts)
* cart_items (individual cart items)
* orders (purchase orders)
* order_items (individual order items)
* payments (payment records)

Local Storage Structure:

* All data stored in browser's localStorage
* Dedicated project folder contains all application files
* Data persistence across browser sessions
* Easy project portability to other devices

Infrastructure Requirements:

* Modern web browser with localStorage support
* Local file server (optional) for development
* Stripe API keys for payment processing
* Self-contained project folder structure

---

# DEVELOPMENT ROADMAP

Phase 1 — MVP Core

* Set up project folder structure with local storage
* Create User, Product, and Order data models for localStorage
* Implement client-side CRUD operations
* Add authentication system using localStorage
* Create basic frontend (HTML, CSS, JS)
* Product listing and order creation
* Stripe payment integration (client-side)

Phase 2 — Extended Features

* Add Cart and CartItems system with localStorage
* Farmer dashboard for product and order management
* Buyer order history and tracking
* Client-side image handling and storage
* Validation and error handling
* Frontend UI improvements

Phase 3 — Final Enhancements

* Farmer analytics (sales, activity)
* Enhanced Stripe integration
* UI responsiveness and pagination
* Optional notifications or reports
* Project portability testing

---

# LOGICAL DEPENDENCY CHAIN

1. Setup project folder structure and localStorage data models
2. Implement authentication system using localStorage
3. Build product CRUD operations (foundation for marketplace)
4. Add cart and order functionality with localStorage
5. Integrate Stripe payments (client-side)
6. Develop farmer dashboard for product and order management
7. Refine UI/UX and add optional enhancements

---

# RISKS AND MITIGATIONS

1. LocalStorage data loss or corruption

   * Mitigation: Implement data backup/export functionality and validation checks.

2. Browser compatibility issues

   * Mitigation: Test across major browsers and implement fallbacks.

3. Stripe client-side integration security

   * Mitigation: Use test keys, implement proper validation, and follow Stripe security guidelines.

4. Data synchronization between sessions

   * Mitigation: Implement proper localStorage management and session handling.

5. Project portability issues

   * Mitigation: Ensure all dependencies are included in project folder and test on different devices.

---

# APPENDIX

Research References:

* Stripe API Docs: [https://stripe.com/docs/api](https://stripe.com/docs/api)
* LocalStorage API: [https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage)
* HTML5 File API: [https://developer.mozilla.org/en-US/docs/Web/API/File](https://developer.mozilla.org/en-US/docs/Web/API/File)

Technical Specifications:

* Modern web browser with localStorage support
* HTML5, CSS3, JavaScript (ES6+)
* Stripe.js for payment processing
* Bootstrap or similar CSS framework (optional)
* Client-side image handling
* Self-contained project folder structure

---

## END OF DOCUMENT

