PRODUCT REQUIREMENTS DOCUMENT (PRD)
Project: Crop-Tap eCommerce Web Application
Type: School Project (Web-based eCommerce Platform)

---

# OVERVIEW

Crop-Tap is a web-based eCommerce platform designed to connect local farmers with buyers such as households, vendors, and small businesses.
The system enables farmers to list their products online, buyers to browse and order fresh produce, and an admin to oversee operations.

Goal:
Provide a functional and simple marketplace for local produce that supports product listings, order management, and online payments — built using an MVC + REST API architecture with Node.js backend and MySQL database.

Core Users:

* Farmer: manages product listings and fulfills orders.
* Buyer: purchases products from the marketplace.
* Admin: oversees all data and platform operations.

Value Proposition:

* Digitizes local agricultural sales.
* Provides transparency and efficiency in farmer-to-buyer transactions.
* Acts as a foundation for future eCommerce scalability.

---

# CORE FEATURES

1. USER MANAGEMENT

   * What it does: Allows registration, login, role assignment (farmer, buyer, admin), and profile management.
   * Why important: Establishes user access and personalized experience.
   * How it works: Uses bcrypt for password hashing and JWT for authentication; role determines feature access.

2. PRODUCT MANAGEMENT

   * What it does: Farmers and admins can add, edit, delete, and view products. Buyers can browse and search.
   * Why important: Core to marketplace operation.
   * How it works: Product model linked to Farmer (User); images handled via Multer + Sharp; endpoints exposed as REST API.

3. CART & ORDER SYSTEM

   * What it does: Buyers can add products to their cart and place orders.
   * Why important: Enables the core transaction workflow.
   * How it works: Buyer’s cart creates order records and order_items; manages total amount and status.

4. PAYMENT INTEGRATION (STRIPE)

   * What it does: Integrates Stripe for online payments (test mode).
   * Why important: Demonstrates secure digital payment flow.
   * How it works: Backend interacts with Stripe Payment Intent API; confirmation updates payment and order tables.

5. ADMIN PANEL

   * What it does: Central dashboard for managing users, products, orders, and payments.
   * Why important: Provides full operational control.
   * How it works: Role-based access; consumes backend REST API endpoints for CRUD operations.

---

# USER EXPERIENCE

User Personas:

* Farmer: wants easy product upload and order tracking tools.
* Buyer: wants a smooth shopping, checkout, and payment experience.
* Admin: requires overview of all platform operations.

Key User Flows:

1. Buyer: Register → Browse → Add to Cart → Checkout → Pay → Track Order
2. Farmer: Register → Create Product → View Orders → Update Status
3. Admin: Login → Manage Users/Products → Monitor Orders/Payments

UI/UX Considerations:

* Clean, mobile-responsive layout.
* Role-based dashboards (Farmer, Buyer, Admin).
* Clear success/error notifications.
* Intuitive product and order navigation.
* Quick access from cart to checkout.

---

# TECHNICAL ARCHITECTURE

System Components:

* Frontend: HTML, CSS, JavaScript (Bootstrap or optional React)
* Backend: Node.js + Express.js
* Database: MySQL (via Sequelize ORM)
* File Uploads: Multer + Sharp
* Authentication: JWT + bcrypt
* Payment Gateway: Stripe API
* Environment Management: dotenv
* Middleware: body-parser, cors

Data Models (from ERD):

* users
* products
* carts
* cart_items
* orders
* order_items
* payments

APIs and Integrations:

* POST /api/auth/register   — Register user
* POST /api/auth/login      — Login user, return JWT
* CRUD /api/users           — User management
* CRUD /api/products        — Product management
* CRUD /api/cart            — Cart operations
* CRUD /api/orders          — Order management
* POST /api/payments        — Process Stripe payments

Infrastructure Requirements:

* Localhost setup using XAMPP (MySQL) and Node.js (v18+)
* Environment file (.env) for keys and DB config
* npm install for dependencies
* npm run dev to start development server

---

# DEVELOPMENT ROADMAP

Phase 1 — MVP Core

* Set up MVC structure (Node.js + Express + Sequelize)
* Create User, Product, and Order models
* Implement RESTful CRUD endpoints
* Add authentication (JWT + bcrypt)
* Create basic frontend (HTML, CSS, JS)
* Product listing and order creation
* Stripe payment integration (test mode)

Phase 2 — Extended Features

* Add Cart and CartItems system
* Admin and Farmer dashboards
* Buyer order history and tracking
* Image uploads (Multer + Sharp)
* Validation and error handling
* Frontend UI improvements

Phase 3 — Final Enhancements

* Admin analytics (sales, activity)
* Stripe webhook integration
* UI responsiveness and pagination
* Optional notifications or reports

---

# LOGICAL DEPENDENCY CHAIN

1. Setup core backend (Express, Sequelize, DB schema)
2. Implement authentication (JWT, bcrypt)
3. Build product CRUD (foundation for marketplace)
4. Add cart and order functionality
5. Integrate Stripe payments
6. Develop admin and farmer dashboards
7. Refine UI/UX and add optional enhancements

---

# RISKS AND MITIGATIONS

1. API mismatch between frontend and backend

   * Mitigation: Maintain Postman documentation and endpoint testing.

2. Database relationship conflicts

   * Mitigation: Validate Sequelize associations early.

3. Stripe test integration issues

   * Mitigation: Use sandbox keys, test environment variables.

4. JWT token misuse

   * Mitigation: Add role-based access middleware.

5. Version control conflicts

   * Mitigation: Use Git branching and pull requests for team workflow.

---

# APPENDIX

Research References:

* Stripe API Docs: [https://stripe.com/docs/api](https://stripe.com/docs/api)
* Sequelize ORM: [https://sequelize.org/](https://sequelize.org/)
* Express.js Framework: [https://expressjs.com/](https://expressjs.com/)

Technical Specifications:

* Node.js v18+
* MySQL 8+
* bcrypt v6.0.0
* body-parser v2.2.0
* cors v2.8.5
* dotenv v17.2.3
* express v5.1.0
* multer v2.0.2
* mysql2 v3.15.2
* sequelize v6.37.7
* sharp v0.34.4

---

## END OF DOCUMENT

